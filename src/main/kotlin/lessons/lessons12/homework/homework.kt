package lessons.lessons12.homework

fun workWitchCollection() {
    // --- Задачи на приведение коллекции к значению ---

    // Проверить, что размер коллекции больше 5 элементов.
    val testCol = mutableListOf(1, 2, 3, 4)
    val testCol2 = listOf("ПЕРВЫЙ", "ВТОРОЙ")
    val a1 = testCol.size > 5

    // Проверить, что коллекция пустая
    val a2 = testCol.isEmpty()

    // Проверить, что коллекция не пустая
    val a3 = testCol.isNotEmpty()

    // Взять элемент по индексу или создать значение если индекса не существует
    val a4 = testCol[1]
    testCol.add(23)

    // Собрать коллекцию в строку
    val a5 = testCol.joinToString()

    // Посчитать сумму всех значений
    val a6 = testCol.sum()

    // Посчитать среднее
    val a7 = testCol.average()

    // Взять максимальное число
    val a8 = testCol.maxOrNull()

    // Взять минимальное число
    val a9 = testCol.minOrNull()

    // Взять первое число или null
    val a10 = testCol.firstOrNull()

    //Проверить что коллекция содержит элемент
    val a11 = testCol.contains(1)

    // ---Задачи на обработку коллекций---
    // Отфильтровать коллекцию по диапазону 18-30
    val a12 = testCol.filter { it in 18..30 }

    // Выбрать числа, которые не делятся на 2 и 3 одновременно
    val a13 = testCol.filter { it % 2 == 0 && it % 3 == 0 }

    // Очистить текстовую коллекцию от null элементов
    val a14 = testCol.filterNotNull()

    // Преобразовать текстовую коллекцию в коллекцию длин слов
    val a15 = testCol2.map { it.length }

    // Преобразовать текстовую коллекцию в мапу, где ключи - перевёрнутые слова, а значения - длина слов
    val a16 = testCol2.map { it.reversed() to it.length }

    // Отсортировать список в алфавитном порядке
    val a17 = testCol2.sorted()

    // Взять первые 3 элемента списка
    val a18 = testCol.take(3)

    // Распечатать квадраты элементов списка
    val a19 = println(testCol.forEach { it * it })

    // Группировать список по первой букве слов
    val a20 = testCol2.groupBy { it.first() }

    // Очистить список от дублей
    val a21 = testCol.distinct()

    // Отсортировать список по убыванию
    val a22 = testCol2.sortedDescending()

    // Взять последние 3 элемента списка
    val a23 = testCol.takeLast(3)
}

// Задача 24. Характеристика числовой коллекции
//Напиши функцию, которая принимает коллекцию чисел и возвращает строку с характеристикой коллекции используя конструкцию when
//
//Если коллекция пустая - “Пусто”
//Если количество элементов меньше пяти - “Короткая”
//Если коллекция начинается с 0 - “Стартовая”
//Если сумма всех чисел больше 10000 - “Массивная”
//Если среднее значение равно 10 - “Сбалансированная”
//Если длина строки образованная склеиванием коллекции в строку равна 20 - “Клейкая”
//Если максимальное число меньше -10 - “Отрицательная”
//Если минимальное число больше 1000 - “Положительная”
//Если содержит одновременно числа 3 и 14 - “Пи***тая”
//Иначе - “Уникальная”

fun numberCollection(value1: List<Int>): String {
return when {
    value1.isEmpty() -> "Пусто"
    value1.size < 5 -> "Короткая"
    value1.first() == 0 -> "Стартовая"
    value1.sum() > 10000 -> "Массивная"
    value1.average() == 10.0 -> "Сбалансированная"
    value1.joinToString(" ").length == 20 -> "Клейкая"
    (value1.maxOrNull() ?: 0) < -10 -> "Отрицательная"
    (value1.minOrNull() ?: 0) > 1000 -> "Положительная"
    value1.contains(3) && value1.contains(14) -> "Пи***тая"
    else -> "Уникальная"
}
}

fun main1() {
    // "Пусто"
    println(numberCollection(listOf()))

// "Короткая"
    println(numberCollection(listOf(1, 2, 3, 4)))

// "Стартовая"
    println(numberCollection(listOf(0, 1, 2, 3, 4)))

// "Массивная"
    println(numberCollection(listOf(3000, 3000, 3000, 2000, 1000)))

// "Сбалансированная"
    println(numberCollection(listOf(10, 10, 10, 10, 10)))

// "Клейкая"
    println(numberCollection(listOf(100, 200, 300, 400, 5678)))

// "Отрицательная"
    println(numberCollection(listOf(-11, -12, -13, -14, -15)))

// "Положительная"
    println(numberCollection(listOf(1001, 1002, 1003, 1004, 1005)))

// "Пи***тая"
    println(numberCollection(listOf(3, 14, 1, 2, 5)))

// "Уникальная"
    println(numberCollection(listOf(999, 888, 777, 666, 555)))
}

// ---Задача 25. Анализ учебных оценок--
// Напиши функцию, которая принимает список чисел и возвращает список чисел.
// Пример данных: val grades = listOf(85, 58, 90, 74, 88, 67, 95, 92, 50, 42, 12)
// Цель: Отфильтровать удовлетворительные оценки (>=60), отсортировать оставшиеся по возрастанию и взять первые 3.

fun getNumberListAndReturnNumberList(value2: List<Int>): List<Int>  {
    val grades = listOf(85, 58, 90, 74, 88, 67, 95, 92, 50, 42, 12)
        .filter { it >= 60 }
        .sorted()
        .take(3)
    return grades

}

// ---Задача 26. Создание каталога по первой букве---
// Напиши функцию, которая принимает список строк и возвращает словарь с ключом - буквой и значением - списком строк.
// Начальные значения: val list = listOf( "Стол", "табурет", "ваза", "Кружка", "Зеркало", "ковер", "Шкаф", "часы", "Люстра", "подушка", "Картина", "столик", "Вазон", "шторы", "Пуф", "книга", "Фоторамка", "светильник", "Коврик", "вешалка", "Подставка", "телевизор", "Комод", "полка", "Абажур", "диван", "Кресло", "занавеска", "Бра", "пепельница", "Глобус", "статуэтка", "Поднос", "фигурка", "Ключница", "плед", "Тумба", "игрушка", "Настенные часы", "подсвечник", "Журнальный столик", "сувенир", "Корзина для белья", "посуда", "Настольная лампа", "торшер", "Этажерка" )
// Цель: Привести все слова в списке к нижнему регистру, сгруппировать в каталог по первой букве используя метод groupBy

fun catalogFirstLetter(value3: List<String>): Map<String, List<String>> {
 return value3
     .map{ it.lowercase() }
     .groupBy { it.first().toString() }
}

fun main3() {
    println(catalogFirstLetter(listOf( "Стол", "табурет", "ваза", "Кружка", "Зеркало", "ковер", "Шкаф", "часы", "Люстра", "подушка", "Картина", "столик", "Вазон", "шторы", "Пуф", "книга", "Фоторамка", "светильник", "Коврик", "вешалка", "Подставка", "телевизор", "Комод", "полка", "Абажур", "диван", "Кресло", "занавеска", "Бра", "пепельница", "Глобус", "статуэтка", "Поднос", "фигурка", "Ключница", "плед", "Тумба", "игрушка", "Настенные часы", "подсвечник", "Журнальный столик", "сувенир", "Корзина для белья", "посуда", "Настольная лампа", "торшер", "Этажерка" )))
}

//---Задание 27. Подсчёт средней длины слов в списке---
// Напиши функцию, которая принимает список строк и возвращает строку.
// Начальные значения взять из предыдущей задачи.
// Цель: Перевести все слова в количество букв, подсчитать среднее значение.
// Вернуть форматированный текст с двумя знаками после запятой, используя функцию format и подходящий шаблон.

fun averageLengthWordsInList(value4: List<String>): String {
    return value4
        .map { it.length }
        .average().toString()
    return String.format("%.2f", value4)

}

//Задание 28: Категоризация чисел
// Напиши функцию, которая принимает список чисел и возвращает словарь с ключами - строками и значениями - список чисел.
// Начальные значения: val numbers = listOf(1, 3, 5, 7, 3, 1, 8, 9, 9, 7)
// Цель: Отобрать уникальные числа, отсортировать по убыванию и сгруппировать по четности (“четные” и “нечетные”).
fun categoryNumber(value5: List<Int>): Map<String, List<Int>> {
    return value5
        .distinct()
        .sortedDescending()
        .groupBy { if (it % 2 == 0) "Четные" else "Нечетные" }
}

//Задание 29: Поиск первого подходящего элемента
// Напиши функцию, которая принимает список чисел и число и возвращает nullable число.
// Начальные значения: val ages = listOf(22, 18, 30, 45, 17, null, 60) и число для проверки возраста, например 18.
// Цель: Найти первый возраст в списке, который соответствует условию (больше второго аргумента) и вернуть его, либо null если значения не нашлось.

fun findFirstSuitableElement(value6: List<Int?>, value7: Int): Int? {
 return value6.firstOrNull { it != null && it > value7 }
}

fun main() {
    println(findFirstSuitableElement(listOf(22, 18, 30, 45, 17, null, 60), 59))
}
